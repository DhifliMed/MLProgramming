# This file was generated automatically by the Snowball to Python compiler
# http://snowballstem.org/

from .basestemmer import BaseStemmer
from .among import Among


class ArabicStemmer(BaseStemmer):
    '''
    This class was automatically generated by a Snowball to Python compiler
    It implements the stemming algorithm defined by a snowball script.
    '''

    a_0 = [
        Among(u"!", -1, 3),
        Among(u"\"", -1, 3),
        Among(u"%", -1, 3),
        Among(u"*", -1, 3),
        Among(u",", -1, 3),
        Among(u".", -1, 3),
        Among(u"/", -1, 3),
        Among(u":", -1, 3),
        Among(u";", -1, 3),
        Among(u"?", -1, 3),
        Among(u"\\", -1, 3),
        Among(u"\u060C", -1, 4),
        Among(u"\u061B", -1, 4),
        Among(u"\u061F", -1, 4),
        Among(u"\u0640", -1, 2),
        Among(u"\u064B", -1, 1),
        Among(u"\u064C", -1, 1),
        Among(u"\u064D", -1, 1),
        Among(u"\u064E", -1, 1),
        Among(u"\u064F", -1, 1),
        Among(u"\u0650", -1, 1),
        Among(u"\u0651", -1, 1),
        Among(u"\u0652", -1, 1),
        Among(u"\u0660", -1, 5),
        Among(u"\u0661", -1, 6),
        Among(u"\u0662", -1, 7),
        Among(u"\u0663", -1, 8),
        Among(u"\u0664", -1, 9),
        Among(u"\u0665", -1, 10),
        Among(u"\u0666", -1, 11),
        Among(u"\u0667", -1, 12),
        Among(u"\u0668", -1, 13),
        Among(u"\u0669", -1, 14),
        Among(u"\u066A", -1, 15),
        Among(u"\u066B", -1, 15),
        Among(u"\u066C", -1, 15),
        Among(u"\uFE80", -1, 16),
        Among(u"\uFE81", -1, 20),
        Among(u"\uFE82", -1, 20),
        Among(u"\uFE83", -1, 17),
        Among(u"\uFE84", -1, 17),
        Among(u"\uFE85", -1, 21),
        Among(u"\uFE86", -1, 21),
        Among(u"\uFE87", -1, 18),
        Among(u"\uFE88", -1, 18),
        Among(u"\uFE89", -1, 19),
        Among(u"\uFE8A", -1, 19),
        Among(u"\uFE8B", -1, 19),
        Among(u"\uFE8C", -1, 19),
        Among(u"\uFE8D", -1, 22),
        Among(u"\uFE8E", -1, 22),
        Among(u"\uFE8F", -1, 23),
        Among(u"\uFE90", -1, 23),
        Among(u"\uFE91", -1, 23),
        Among(u"\uFE92", -1, 23),
        Among(u"\uFE93", -1, 24),
        Among(u"\uFE94", -1, 24),
        Among(u"\uFE95", -1, 25),
        Among(u"\uFE96", -1, 25),
        Among(u"\uFE97", -1, 25),
        Among(u"\uFE98", -1, 25),
        Among(u"\uFE99", -1, 26),
        Among(u"\uFE9A", -1, 26),
        Among(u"\uFE9B", -1, 26),
        Among(u"\uFE9C", -1, 26),
        Among(u"\uFE9D", -1, 27),
        Among(u"\uFE9E", -1, 27),
        Among(u"\uFE9F", -1, 27),
        Among(u"\uFEA0", -1, 27),
        Among(u"\uFEA1", -1, 28),
        Among(u"\uFEA2", -1, 28),
        Among(u"\uFEA3", -1, 28),
        Among(u"\uFEA4", -1, 28),
        Among(u"\uFEA5", -1, 29),
        Among(u"\uFEA6", -1, 29),
        Among(u"\uFEA7", -1, 29),
        Among(u"\uFEA8", -1, 29),
        Among(u"\uFEA9", -1, 30),
        Among(u"\uFEAA", -1, 30),
        Among(u"\uFEAB", -1, 31),
        Among(u"\uFEAC", -1, 31),
        Among(u"\uFEAD", -1, 32),
        Among(u"\uFEAE", -1, 32),
        Among(u"\uFEAF", -1, 33),
        Among(u"\uFEB0", -1, 33),
        Among(u"\uFEB1", -1, 34),
        Among(u"\uFEB2", -1, 34),
        Among(u"\uFEB3", -1, 34),
        Among(u"\uFEB4", -1, 34),
        Among(u"\uFEB5", -1, 35),
        Among(u"\uFEB6", -1, 35),
        Among(u"\uFEB7", -1, 35),
        Among(u"\uFEB8", -1, 35),
        Among(u"\uFEB9", -1, 36),
        Among(u"\uFEBA", -1, 36),
        Among(u"\uFEBB", -1, 36),
        Among(u"\uFEBC", -1, 36),
        Among(u"\uFEBD", -1, 37),
        Among(u"\uFEBE", -1, 37),
        Among(u"\uFEBF", -1, 37),
        Among(u"\uFEC0", -1, 37),
        Among(u"\uFEC1", -1, 38),
        Among(u"\uFEC2", -1, 38),
        Among(u"\uFEC3", -1, 38),
        Among(u"\uFEC4", -1, 38),
        Among(u"\uFEC5", -1, 39),
        Among(u"\uFEC6", -1, 39),
        Among(u"\uFEC7", -1, 39),
        Among(u"\uFEC8", -1, 39),
        Among(u"\uFEC9", -1, 40),
        Among(u"\uFECA", -1, 40),
        Among(u"\uFECB", -1, 40),
        Among(u"\uFECC", -1, 40),
        Among(u"\uFECD", -1, 41),
        Among(u"\uFECE", -1, 41),
        Among(u"\uFECF", -1, 41),
        Among(u"\uFED0", -1, 41),
        Among(u"\uFED1", -1, 42),
        Among(u"\uFED2", -1, 42),
        Among(u"\uFED3", -1, 42),
        Among(u"\uFED4", -1, 42),
        Among(u"\uFED5", -1, 43),
        Among(u"\uFED6", -1, 43),
        Among(u"\uFED7", -1, 43),
        Among(u"\uFED8", -1, 43),
        Among(u"\uFED9", -1, 44),
        Among(u"\uFEDA", -1, 44),
        Among(u"\uFEDB", -1, 44),
        Among(u"\uFEDC", -1, 44),
        Among(u"\uFEDD", -1, 45),
        Among(u"\uFEDE", -1, 45),
        Among(u"\uFEDF", -1, 45),
        Among(u"\uFEE0", -1, 45),
        Among(u"\uFEE1", -1, 46),
        Among(u"\uFEE2", -1, 46),
        Among(u"\uFEE3", -1, 46),
        Among(u"\uFEE4", -1, 46),
        Among(u"\uFEE5", -1, 47),
        Among(u"\uFEE6", -1, 47),
        Among(u"\uFEE7", -1, 47),
        Among(u"\uFEE8", -1, 47),
        Among(u"\uFEE9", -1, 48),
        Among(u"\uFEEA", -1, 48),
        Among(u"\uFEEB", -1, 48),
        Among(u"\uFEEC", -1, 48),
        Among(u"\uFEED", -1, 49),
        Among(u"\uFEEE", -1, 49),
        Among(u"\uFEEF", -1, 50),
        Among(u"\uFEF0", -1, 50),
        Among(u"\uFEF1", -1, 51),
        Among(u"\uFEF2", -1, 51),
        Among(u"\uFEF3", -1, 51),
        Among(u"\uFEF4", -1, 51),
        Among(u"\uFEF5", -1, 55),
        Among(u"\uFEF6", -1, 55),
        Among(u"\uFEF7", -1, 53),
        Among(u"\uFEF8", -1, 53),
        Among(u"\uFEF9", -1, 54),
        Among(u"\uFEFA", -1, 54),
        Among(u"\uFEFB", -1, 52),
        Among(u"\uFEFC", -1, 52)
    ]

    a_1 = [
        Among(u"\u0622", -1, 1),
        Among(u"\u0623", -1, 1),
        Among(u"\u0624", -1, 2),
        Among(u"\u0625", -1, 1),
        Among(u"\u0626", -1, 3)
    ]

    a_2 = [
        Among(u"\u0622", -1, 1),
        Among(u"\u0623", -1, 1),
        Among(u"\u0624", -1, 2),
        Among(u"\u0625", -1, 1),
        Among(u"\u0626", -1, 3)
    ]

    a_3 = [
        Among(u"\u0627\u0644", -1, 2),
        Among(u"\u0628\u0627\u0644", -1, 1),
        Among(u"\u0643\u0627\u0644", -1, 1),
        Among(u"\u0644\u0644", -1, 2)
    ]

    a_4 = [
        Among(u"\u0629", -1, 1)
    ]

    a_5 = [
        Among(u"\u0623\u0622", -1, 2),
        Among(u"\u0623\u0623", -1, 1),
        Among(u"\u0623\u0624", -1, 3),
        Among(u"\u0623\u0625", -1, 5),
        Among(u"\u0623\u0627", -1, 4)
    ]

    a_6 = [
        Among(u"\u0641\u0627\u0644", -1, 1),
        Among(u"\u0648\u0627\u0644", -1, 2)
    ]

    a_7 = [
        Among(u"\u0641", -1, 1),
        Among(u"\u0648", -1, 2)
    ]

    a_8 = [
        Among(u"\u0627\u0644", -1, 2),
        Among(u"\u0628\u0627\u0644", -1, 1),
        Among(u"\u0643\u0627\u0644", -1, 1),
        Among(u"\u0644\u0644", -1, 2)
    ]

    a_9 = [
        Among(u"\u0628", -1, 1),
        Among(u"\u0628\u0628", 0, 4),
        Among(u"\u0643", -1, 2),
        Among(u"\u0643\u0643", 2, 5),
        Among(u"\u0644", -1, 3)
    ]

    a_10 = [
        Among(u"\u0633\u0623", -1, 4),
        Among(u"\u0633\u062A", -1, 2),
        Among(u"\u0633\u0646", -1, 3),
        Among(u"\u0633\u064A", -1, 1)
    ]

    a_11 = [
        Among(u"\u062A\u0633\u062A", -1, 1),
        Among(u"\u0646\u0633\u062A", -1, 1),
        Among(u"\u064A\u0633\u062A", -1, 1)
    ]

    a_12 = [
        Among(u"\u0643\u0645\u0627", -1, 3),
        Among(u"\u0647\u0645\u0627", -1, 3),
        Among(u"\u0646\u0627", -1, 2),
        Among(u"\u0647\u0627", -1, 2),
        Among(u"\u0643", -1, 1),
        Among(u"\u0643\u0645", -1, 2),
        Among(u"\u0647\u0645", -1, 2),
        Among(u"\u0647\u0646", -1, 2),
        Among(u"\u0647", -1, 1),
        Among(u"\u064A", -1, 1)
    ]

    a_13 = [
        Among(u"\u0646", -1, 1)
    ]

    a_14 = [
        Among(u"\u0627", -1, 1),
        Among(u"\u0648", -1, 1),
        Among(u"\u064A", -1, 1)
    ]

    a_15 = [
        Among(u"\u0627\u062A", -1, 1)
    ]

    a_16 = [
        Among(u"\u062A", -1, 1)
    ]

    a_17 = [
        Among(u"\u0629", -1, 1)
    ]

    a_18 = [
        Among(u"\u064A", -1, 1)
    ]

    a_19 = [
        Among(u"\u0643\u0645\u0627", -1, 3),
        Among(u"\u0647\u0645\u0627", -1, 3),
        Among(u"\u0646\u0627", -1, 2),
        Among(u"\u0647\u0627", -1, 2),
        Among(u"\u0643", -1, 1),
        Among(u"\u0643\u0645", -1, 2),
        Among(u"\u0647\u0645", -1, 2),
        Among(u"\u0643\u0646", -1, 2),
        Among(u"\u0647\u0646", -1, 2),
        Among(u"\u0647", -1, 1),
        Among(u"\u0643\u0645\u0648", -1, 3),
        Among(u"\u0646\u064A", -1, 2)
    ]

    a_20 = [
        Among(u"\u0627", -1, 2),
        Among(u"\u062A\u0627", 0, 3),
        Among(u"\u062A\u0645\u0627", 0, 5),
        Among(u"\u0646\u0627", 0, 3),
        Among(u"\u062A", -1, 1),
        Among(u"\u0646", -1, 2),
        Among(u"\u0627\u0646", 5, 4),
        Among(u"\u062A\u0646", 5, 3),
        Among(u"\u0648\u0646", 5, 4),
        Among(u"\u064A\u0646", 5, 4),
        Among(u"\u064A", -1, 2)
    ]

    a_21 = [
        Among(u"\u0648\u0627", -1, 1),
        Among(u"\u062A\u0645", -1, 1)
    ]

    a_22 = [
        Among(u"\u0648", -1, 1),
        Among(u"\u062A\u0645\u0648", 0, 2)
    ]

    a_23 = [
        Among(u"\u0649", -1, 1)
    ]

    B_is_defined = False
    B_is_verb = False
    B_is_noun = False
    I_word_len = 0


    def __r_Normalize_pre(self):
        # (, line 260
        # loop, line 261
        for v_1 in range (len(self.current), 0, -1):

            # (, line 261
            # or, line 330
            try:
                v_2 = self.cursor
                try:
                    # (, line 262
                    # [, line 263
                    self.bra = self.cursor
                    # substring, line 263
                    among_var = self.find_among(ArabicStemmer.a_0)
                    if among_var == 0:
                        raise lab1()
                    # ], line 263
                    self.ket = self.cursor
                    if among_var == 0:
                        raise lab1()
                    elif among_var == 1:
                        # (, line 264
                        # delete, line 264
                        if not self.slice_del():
                            return False

                    elif among_var == 2:
                        # (, line 265
                        # delete, line 265
                        if not self.slice_del():
                            return False

                    elif among_var == 3:
                        # (, line 268
                        # delete, line 268
                        if not self.slice_del():
                            return False

                    elif among_var == 4:
                        # (, line 269
                        # delete, line 269
                        if not self.slice_del():
                            return False

                    elif among_var == 5:
                        # (, line 272
                        # <-, line 272
                        if not self.slice_from(u"0"):
                            return False
                    elif among_var == 6:
                        # (, line 273
                        # <-, line 273
                        if not self.slice_from(u"1"):
                            return False
                    elif among_var == 7:
                        # (, line 274
                        # <-, line 274
                        if not self.slice_from(u"2"):
                            return False
                    elif among_var == 8:
                        # (, line 275
                        # <-, line 275
                        if not self.slice_from(u"3"):
                            return False
                    elif among_var == 9:
                        # (, line 276
                        # <-, line 276
                        if not self.slice_from(u"4"):
                            return False
                    elif among_var == 10:
                        # (, line 277
                        # <-, line 277
                        if not self.slice_from(u"5"):
                            return False
                    elif among_var == 11:
                        # (, line 278
                        # <-, line 278
                        if not self.slice_from(u"6"):
                            return False
                    elif among_var == 12:
                        # (, line 279
                        # <-, line 279
                        if not self.slice_from(u"7"):
                            return False
                    elif among_var == 13:
                        # (, line 280
                        # <-, line 280
                        if not self.slice_from(u"8"):
                            return False
                    elif among_var == 14:
                        # (, line 281
                        # <-, line 281
                        if not self.slice_from(u"9"):
                            return False
                    elif among_var == 15:
                        # (, line 282
                        # delete, line 282
                        if not self.slice_del():
                            return False

                    elif among_var == 16:
                        # (, line 285
                        # <-, line 285
                        if not self.slice_from(u"\u0621"):
                            return False
                    elif among_var == 17:
                        # (, line 286
                        # <-, line 286
                        if not self.slice_from(u"\u0623"):
                            return False
                    elif among_var == 18:
                        # (, line 287
                        # <-, line 287
                        if not self.slice_from(u"\u0625"):
                            return False
                    elif among_var == 19:
                        # (, line 288
                        # <-, line 288
                        if not self.slice_from(u"\u0626"):
                            return False
                    elif among_var == 20:
                        # (, line 289
                        # <-, line 289
                        if not self.slice_from(u"\u0622"):
                            return False
                    elif among_var == 21:
                        # (, line 290
                        # <-, line 290
                        if not self.slice_from(u"\u0624"):
                            return False
                    elif among_var == 22:
                        # (, line 291
                        # <-, line 291
                        if not self.slice_from(u"\u0627"):
                            return False
                    elif among_var == 23:
                        # (, line 292
                        # <-, line 292
                        if not self.slice_from(u"\u0628"):
                            return False
                    elif among_var == 24:
                        # (, line 293
                        # <-, line 293
                        if not self.slice_from(u"\u0629"):
                            return False
                    elif among_var == 25:
                        # (, line 294
                        # <-, line 294
                        if not self.slice_from(u"\u062A"):
                            return False
                    elif among_var == 26:
                        # (, line 295
                        # <-, line 295
                        if not self.slice_from(u"\u062B"):
                            return False
                    elif among_var == 27:
                        # (, line 296
                        # <-, line 296
                        if not self.slice_from(u"\u062C"):
                            return False
                    elif among_var == 28:
                        # (, line 297
                        # <-, line 297
                        if not self.slice_from(u"\u062D"):
                            return False
                    elif among_var == 29:
                        # (, line 298
                        # <-, line 298
                        if not self.slice_from(u"\u062E"):
                            return False
                    elif among_var == 30:
                        # (, line 299
                        # <-, line 299
                        if not self.slice_from(u"\u062F"):
                            return False
                    elif among_var == 31:
                        # (, line 300
                        # <-, line 300
                        if not self.slice_from(u"\u0630"):
                            return False
                    elif among_var == 32:
                        # (, line 301
                        # <-, line 301
                        if not self.slice_from(u"\u0631"):
                            return False
                    elif among_var == 33:
                        # (, line 302
                        # <-, line 302
                        if not self.slice_from(u"\u0632"):
                            return False
                    elif among_var == 34:
                        # (, line 303
                        # <-, line 303
                        if not self.slice_from(u"\u0633"):
                            return False
                    elif among_var == 35:
                        # (, line 304
                        # <-, line 304
                        if not self.slice_from(u"\u0634"):
                            return False
                    elif among_var == 36:
                        # (, line 305
                        # <-, line 305
                        if not self.slice_from(u"\u0635"):
                            return False
                    elif among_var == 37:
                        # (, line 306
                        # <-, line 306
                        if not self.slice_from(u"\u0636"):
                            return False
                    elif among_var == 38:
                        # (, line 307
                        # <-, line 307
                        if not self.slice_from(u"\u0637"):
                            return False
                    elif among_var == 39:
                        # (, line 308
                        # <-, line 308
                        if not self.slice_from(u"\u0638"):
                            return False
                    elif among_var == 40:
                        # (, line 309
                        # <-, line 309
                        if not self.slice_from(u"\u0639"):
                            return False
                    elif among_var == 41:
                        # (, line 310
                        # <-, line 310
                        if not self.slice_from(u"\u063A"):
                            return False
                    elif among_var == 42:
                        # (, line 311
                        # <-, line 311
                        if not self.slice_from(u"\u0641"):
                            return False
                    elif among_var == 43:
                        # (, line 312
                        # <-, line 312
                        if not self.slice_from(u"\u0642"):
                            return False
                    elif among_var == 44:
                        # (, line 313
                        # <-, line 313
                        if not self.slice_from(u"\u0643"):
                            return False
                    elif among_var == 45:
                        # (, line 314
                        # <-, line 314
                        if not self.slice_from(u"\u0644"):
                            return False
                    elif among_var == 46:
                        # (, line 315
                        # <-, line 315
                        if not self.slice_from(u"\u0645"):
                            return False
                    elif among_var == 47:
                        # (, line 316
                        # <-, line 316
                        if not self.slice_from(u"\u0646"):
                            return False
                    elif among_var == 48:
                        # (, line 317
                        # <-, line 317
                        if not self.slice_from(u"\u0647"):
                            return False
                    elif among_var == 49:
                        # (, line 318
                        # <-, line 318
                        if not self.slice_from(u"\u0648"):
                            return False
                    elif among_var == 50:
                        # (, line 319
                        # <-, line 319
                        if not self.slice_from(u"\u0649"):
                            return False
                    elif among_var == 51:
                        # (, line 320
                        # <-, line 320
                        if not self.slice_from(u"\u064A"):
                            return False
                    elif among_var == 52:
                        # (, line 323
                        # <-, line 323
                        if not self.slice_from(u"\u0644\u0627"):
                            return False
                    elif among_var == 53:
                        # (, line 324
                        # <-, line 324
                        if not self.slice_from(u"\u0644\u0623"):
                            return False
                    elif among_var == 54:
                        # (, line 325
                        # <-, line 325
                        if not self.slice_from(u"\u0644\u0625"):
                            return False
                    elif among_var == 55:
                        # (, line 326
                        # <-, line 326
                        if not self.slice_from(u"\u0644\u0622"):
                            return False
                    raise lab0()
                except lab1: pass
                self.cursor = v_2
                # next, line 331
                if self.cursor >= self.limit:
                    return False
                self.cursor += 1
            except lab0: pass
        return True

    def __r_Normalize_post(self):
        # (, line 335
        # do, line 337
        v_1 = self.cursor
        try:
            # (, line 337
            # backwards, line 339
            self.limit_backward = self.cursor
            self.cursor = self.limit
            # (, line 339
            # [, line 340
            self.ket = self.cursor
            # substring, line 340
            among_var = self.find_among_b(ArabicStemmer.a_1)
            if among_var == 0:
                raise lab0()
            # ], line 340
            self.bra = self.cursor
            if among_var == 0:
                raise lab0()
            elif among_var == 1:
                # (, line 341
                # <-, line 341
                if not self.slice_from(u"\u0621"):
                    return False
            elif among_var == 2:
                # (, line 342
                # <-, line 342
                if not self.slice_from(u"\u0621"):
                    return False
            elif among_var == 3:
                # (, line 343
                # <-, line 343
                if not self.slice_from(u"\u0621"):
                    return False
            self.cursor = self.limit_backward
        except lab0: pass
        self.cursor = v_1
        # do, line 348
        v_2 = self.cursor
        try:
            # loop, line 348
            for v_3 in range (self.I_word_len, 0, -1):

                # (, line 348
                # or, line 357
                try:
                    v_4 = self.cursor
                    try:
                        # (, line 349
                        # [, line 351
                        self.bra = self.cursor
                        # substring, line 351
                        among_var = self.find_among(ArabicStemmer.a_2)
                        if among_var == 0:
                            raise lab3()
                        # ], line 351
                        self.ket = self.cursor
                        if among_var == 0:
                            raise lab3()
                        elif among_var == 1:
                            # (, line 352
                            # <-, line 352
                            if not self.slice_from(u"\u0627"):
                                return False
                        elif among_var == 2:
                            # (, line 353
                            # <-, line 353
                            if not self.slice_from(u"\u0648"):
                                return False
                        elif among_var == 3:
                            # (, line 354
                            # <-, line 354
                            if not self.slice_from(u"\u064A"):
                                return False
                        raise lab2()
                    except lab3: pass
                    self.cursor = v_4
                    # next, line 358
                    if self.cursor >= self.limit:
                        raise lab1()
                    self.cursor += 1
                except lab2: pass
        except lab1: pass
        self.cursor = v_2
        return True

    def __r_Checks1(self):
        # (, line 363
        self.I_word_len = len(self.current)
        # [, line 365
        self.bra = self.cursor
        # substring, line 365
        among_var = self.find_among(ArabicStemmer.a_3)
        if among_var == 0:
            return False
        # ], line 365
        self.ket = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 366
            if not self.I_word_len > 4:
                return False
            # set is_noun, line 366
            self.B_is_noun = True
            # unset is_verb, line 366
            self.B_is_verb = False
            # set is_defined, line 366
            self.B_is_defined = True
        elif among_var == 2:
            # (, line 367
            if not self.I_word_len > 3:
                return False
            # set is_noun, line 367
            self.B_is_noun = True
            # unset is_verb, line 367
            self.B_is_verb = False
            # set is_defined, line 367
            self.B_is_defined = True
        return True

    def __r_Checks2(self):
        # (, line 373
        self.I_word_len = len(self.current)
        # [, line 375
        self.ket = self.cursor
        # substring, line 375
        among_var = self.find_among_b(ArabicStemmer.a_4)
        if among_var == 0:
            return False
        # ], line 375
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 376
            if not self.I_word_len > 2:
                return False
            # set is_noun, line 376
            self.B_is_noun = True
            # unset is_verb, line 376
            self.B_is_verb = False
        return True

    def __r_Prefix_Step1(self):
        # (, line 382
        self.I_word_len = len(self.current)
        # [, line 384
        self.bra = self.cursor
        # substring, line 384
        among_var = self.find_among(ArabicStemmer.a_5)
        if among_var == 0:
            return False
        # ], line 384
        self.ket = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 385
            if not self.I_word_len > 3:
                return False
            # <-, line 385
            if not self.slice_from(u"\u0623"):
                return False
        elif among_var == 2:
            # (, line 386
            if not self.I_word_len > 3:
                return False
            # <-, line 386
            if not self.slice_from(u"\u0622"):
                return False
        elif among_var == 3:
            # (, line 387
            if not self.I_word_len > 3:
                return False
            # <-, line 387
            if not self.slice_from(u"\u0623"):
                return False
        elif among_var == 4:
            # (, line 388
            if not self.I_word_len > 3:
                return False
            # <-, line 388
            if not self.slice_from(u"\u0627"):
                return False
        elif among_var == 5:
            # (, line 389
            if not self.I_word_len > 3:
                return False
            # <-, line 389
            if not self.slice_from(u"\u0625"):
                return False
        return True

    def __r_Prefix_Step2a(self):
        # (, line 394
        self.I_word_len = len(self.current)
        # [, line 396
        self.bra = self.cursor
        # substring, line 396
        among_var = self.find_among(ArabicStemmer.a_6)
        if among_var == 0:
            return False
        # ], line 396
        self.ket = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 397
            if not self.I_word_len > 5:
                return False
            # delete, line 397
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 398
            if not self.I_word_len > 5:
                return False
            # delete, line 398
            if not self.slice_del():
                return False

        return True

    def __r_Prefix_Step2b(self):
        # (, line 402
        self.I_word_len = len(self.current)
        # not, line 404
        v_1 = self.cursor
        try:
            # literal, line 404
            if not self.eq_s(u"\u0641\u0627"):
                raise lab0()
            return False
        except lab0: pass
        self.cursor = v_1
        # not, line 405
        v_2 = self.cursor
        try:
            # literal, line 405
            if not self.eq_s(u"\u0648\u0627"):
                raise lab1()
            return False
        except lab1: pass
        self.cursor = v_2
        # [, line 406
        self.bra = self.cursor
        # substring, line 406
        among_var = self.find_among(ArabicStemmer.a_7)
        if among_var == 0:
            return False
        # ], line 406
        self.ket = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 407
            if not self.I_word_len > 3:
                return False
            # delete, line 407
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 408
            if not self.I_word_len > 3:
                return False
            # delete, line 408
            if not self.slice_del():
                return False

        return True

    def __r_Prefix_Step3a_Noun(self):
        # (, line 412
        self.I_word_len = len(self.current)
        # [, line 414
        self.bra = self.cursor
        # substring, line 414
        among_var = self.find_among(ArabicStemmer.a_8)
        if among_var == 0:
            return False
        # ], line 414
        self.ket = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 415
            if not self.I_word_len > 5:
                return False
            # delete, line 415
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 416
            if not self.I_word_len > 4:
                return False
            # delete, line 416
            if not self.slice_del():
                return False

        return True

    def __r_Prefix_Step3b_Noun(self):
        # (, line 420
        self.I_word_len = len(self.current)
        # not, line 422
        v_1 = self.cursor
        try:
            # literal, line 422
            if not self.eq_s(u"\u0628\u0627"):
                raise lab0()
            return False
        except lab0: pass
        self.cursor = v_1
        # [, line 423
        self.bra = self.cursor
        # substring, line 423
        among_var = self.find_among(ArabicStemmer.a_9)
        if among_var == 0:
            return False
        # ], line 423
        self.ket = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 424
            if not self.I_word_len > 3:
                return False
            # delete, line 424
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 425
            if not self.I_word_len > 4:
                return False
            # delete, line 425
            if not self.slice_del():
                return False

        elif among_var == 3:
            # (, line 426
            if not self.I_word_len > 4:
                return False
            # delete, line 426
            if not self.slice_del():
                return False

        elif among_var == 4:
            # (, line 427
            if not self.I_word_len > 3:
                return False
            # <-, line 427
            if not self.slice_from(u"\u0628"):
                return False
        elif among_var == 5:
            # (, line 428
            if not self.I_word_len > 3:
                return False
            # <-, line 428
            if not self.slice_from(u"\u0643"):
                return False
        return True

    def __r_Prefix_Step3_Verb(self):
        # (, line 433
        self.I_word_len = len(self.current)
        # [, line 435
        self.bra = self.cursor
        # substring, line 435
        among_var = self.find_among(ArabicStemmer.a_10)
        if among_var == 0:
            return False
        # ], line 435
        self.ket = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 437
            if not self.I_word_len > 4:
                return False
            # <-, line 437
            if not self.slice_from(u"\u064A"):
                return False
        elif among_var == 2:
            # (, line 438
            if not self.I_word_len > 4:
                return False
            # <-, line 438
            if not self.slice_from(u"\u062A"):
                return False
        elif among_var == 3:
            # (, line 439
            if not self.I_word_len > 4:
                return False
            # <-, line 439
            if not self.slice_from(u"\u0646"):
                return False
        elif among_var == 4:
            # (, line 440
            if not self.I_word_len > 4:
                return False
            # <-, line 440
            if not self.slice_from(u"\u0623"):
                return False
        return True

    def __r_Prefix_Step4_Verb(self):
        # (, line 444
        self.I_word_len = len(self.current)
        # [, line 446
        self.bra = self.cursor
        # substring, line 446
        among_var = self.find_among(ArabicStemmer.a_11)
        if among_var == 0:
            return False
        # ], line 446
        self.ket = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 447
            if not self.I_word_len > 4:
                return False
            # set is_verb, line 447
            self.B_is_verb = True
            # unset is_noun, line 447
            self.B_is_noun = False
            # <-, line 447
            if not self.slice_from(u"\u0627\u0633\u062A"):
                return False
        return True

    def __r_Suffix_Noun_Step1a(self):
        # (, line 454
        self.I_word_len = len(self.current)
        # [, line 456
        self.ket = self.cursor
        # substring, line 456
        among_var = self.find_among_b(ArabicStemmer.a_12)
        if among_var == 0:
            return False
        # ], line 456
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 457
            if not self.I_word_len >= 4:
                return False
            # delete, line 457
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 458
            if not self.I_word_len >= 5:
                return False
            # delete, line 458
            if not self.slice_del():
                return False

        elif among_var == 3:
            # (, line 459
            if not self.I_word_len >= 6:
                return False
            # delete, line 459
            if not self.slice_del():
                return False

        return True

    def __r_Suffix_Noun_Step1b(self):
        # (, line 462
        self.I_word_len = len(self.current)
        # [, line 464
        self.ket = self.cursor
        # substring, line 464
        among_var = self.find_among_b(ArabicStemmer.a_13)
        if among_var == 0:
            return False
        # ], line 464
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 465
            if not self.I_word_len > 5:
                return False
            # delete, line 465
            if not self.slice_del():
                return False

        return True

    def __r_Suffix_Noun_Step2a(self):
        # (, line 469
        self.I_word_len = len(self.current)
        # [, line 471
        self.ket = self.cursor
        # substring, line 471
        among_var = self.find_among_b(ArabicStemmer.a_14)
        if among_var == 0:
            return False
        # ], line 471
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 472
            if not self.I_word_len > 4:
                return False
            # delete, line 472
            if not self.slice_del():
                return False

        return True

    def __r_Suffix_Noun_Step2b(self):
        # (, line 476
        self.I_word_len = len(self.current)
        # [, line 478
        self.ket = self.cursor
        # substring, line 478
        among_var = self.find_among_b(ArabicStemmer.a_15)
        if among_var == 0:
            return False
        # ], line 478
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 479
            if not self.I_word_len >= 5:
                return False
            # delete, line 479
            if not self.slice_del():
                return False

        return True

    def __r_Suffix_Noun_Step2c1(self):
        # (, line 483
        self.I_word_len = len(self.current)
        # [, line 485
        self.ket = self.cursor
        # substring, line 485
        among_var = self.find_among_b(ArabicStemmer.a_16)
        if among_var == 0:
            return False
        # ], line 485
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 486
            if not self.I_word_len >= 4:
                return False
            # delete, line 486
            if not self.slice_del():
                return False

        return True

    def __r_Suffix_Noun_Step2c2(self):
        # (, line 489
        self.I_word_len = len(self.current)
        # [, line 491
        self.ket = self.cursor
        # substring, line 491
        among_var = self.find_among_b(ArabicStemmer.a_17)
        if among_var == 0:
            return False
        # ], line 491
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 492
            if not self.I_word_len >= 3:
                return False
            # delete, line 492
            if not self.slice_del():
                return False

        return True

    def __r_Suffix_Noun_Step3(self):
        # (, line 495
        self.I_word_len = len(self.current)
        # [, line 497
        self.ket = self.cursor
        # substring, line 497
        among_var = self.find_among_b(ArabicStemmer.a_18)
        if among_var == 0:
            return False
        # ], line 497
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 498
            if not self.I_word_len >= 3:
                return False
            # delete, line 498
            if not self.slice_del():
                return False

        return True

    def __r_Suffix_Verb_Step1(self):
        # (, line 502
        self.I_word_len = len(self.current)
        # [, line 504
        self.ket = self.cursor
        # substring, line 504
        among_var = self.find_among_b(ArabicStemmer.a_19)
        if among_var == 0:
            return False
        # ], line 504
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 505
            if not self.I_word_len >= 4:
                return False
            # delete, line 505
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 506
            if not self.I_word_len >= 5:
                return False
            # delete, line 506
            if not self.slice_del():
                return False

        elif among_var == 3:
            # (, line 507
            if not self.I_word_len >= 6:
                return False
            # delete, line 507
            if not self.slice_del():
                return False

        return True

    def __r_Suffix_Verb_Step2a(self):
        # (, line 510
        self.I_word_len = len(self.current)
        # [, line 512
        self.ket = self.cursor
        # substring, line 512
        among_var = self.find_among_b(ArabicStemmer.a_20)
        if among_var == 0:
            return False
        # ], line 512
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 513
            if not self.I_word_len >= 4:
                return False
            # delete, line 513
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 514
            if not self.I_word_len >= 4:
                return False
            # delete, line 514
            if not self.slice_del():
                return False

        elif among_var == 3:
            # (, line 515
            if not self.I_word_len >= 5:
                return False
            # delete, line 515
            if not self.slice_del():
                return False

        elif among_var == 4:
            # (, line 516
            if not self.I_word_len > 5:
                return False
            # delete, line 516
            if not self.slice_del():
                return False

        elif among_var == 5:
            # (, line 517
            if not self.I_word_len >= 6:
                return False
            # delete, line 517
            if not self.slice_del():
                return False

        return True

    def __r_Suffix_Verb_Step2b(self):
        # (, line 521
        self.I_word_len = len(self.current)
        # [, line 523
        self.ket = self.cursor
        # substring, line 523
        among_var = self.find_among_b(ArabicStemmer.a_21)
        if among_var == 0:
            return False
        # ], line 523
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 524
            if not self.I_word_len >= 5:
                return False
            # delete, line 524
            if not self.slice_del():
                return False

        return True

    def __r_Suffix_Verb_Step2c(self):
        # (, line 529
        self.I_word_len = len(self.current)
        # [, line 531
        self.ket = self.cursor
        # substring, line 531
        among_var = self.find_among_b(ArabicStemmer.a_22)
        if among_var == 0:
            return False
        # ], line 531
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 532
            if not self.I_word_len >= 4:
                return False
            # delete, line 532
            if not self.slice_del():
                return False

        elif among_var == 2:
            # (, line 533
            if not self.I_word_len >= 6:
                return False
            # delete, line 533
            if not self.slice_del():
                return False

        return True

    def __r_Suffix_All_alef_maqsura(self):
        # (, line 537
        self.I_word_len = len(self.current)
        # [, line 539
        self.ket = self.cursor
        # substring, line 539
        among_var = self.find_among_b(ArabicStemmer.a_23)
        if among_var == 0:
            return False
        # ], line 539
        self.bra = self.cursor
        if among_var == 0:
            return False
        elif among_var == 1:
            # (, line 540
            # <-, line 540
            if not self.slice_from(u"\u064A"):
                return False
        return True

    def _stem(self):
        # (, line 547
        # set is_noun, line 549
        self.B_is_noun = True
        # set is_verb, line 550
        self.B_is_verb = True
        # unset is_defined, line 551
        self.B_is_defined = False
        # do, line 554
        v_1 = self.cursor
        try:
            # call Checks1, line 554
            if not self.__r_Checks1():
                raise lab0()
        except lab0: pass
        self.cursor = v_1
        # backwards, line 555
        self.limit_backward = self.cursor
        self.cursor = self.limit
        # (, line 555
        # do, line 555
        v_2 = self.limit - self.cursor
        try:
            # call Checks2, line 555
            if not self.__r_Checks2():
                raise lab1()
        except lab1: pass
        self.cursor = self.limit - v_2
        self.cursor = self.limit_backward
        # do, line 558
        v_3 = self.cursor
        try:
            # call Normalize_pre, line 558
            if not self.__r_Normalize_pre():
                raise lab2()
        except lab2: pass
        self.cursor = v_3
        # backwards, line 561
        self.limit_backward = self.cursor
        self.cursor = self.limit
        # (, line 561
        # do, line 563
        v_4 = self.limit - self.cursor
        try:
            # (, line 563
            # or, line 577
            try:
                v_5 = self.limit - self.cursor
                try:
                    # (, line 565
                    # Boolean test is_verb, line 566
                    if not self.B_is_verb:
                        raise lab5()
                    # (, line 567
                    # or, line 572
                    try:
                        v_6 = self.limit - self.cursor
                        try:
                            # (, line 568
                            # (, line 569
                            # atleast, line 569
                            v_7 = 1
                            # atleast, line 569
                            try:
                                while True:
                                    try:
                                        v_8 = self.limit - self.cursor
                                        try:
                                            # call Suffix_Verb_Step1, line 569
                                            if not self.__r_Suffix_Verb_Step1():
                                                raise lab10()
                                            v_7 -= 1
                                            raise lab9()
                                        except lab10: pass
                                        self.cursor = self.limit - v_8
                                        raise lab8()
                                    except lab9: pass
                            except lab8: pass
                            if v_7 > 0:
                                raise lab7()
                            # (, line 570
                            # or, line 570
                            try:
                                v_9 = self.limit - self.cursor
                                try:
                                    # call Suffix_Verb_Step2a, line 570
                                    if not self.__r_Suffix_Verb_Step2a():
                                        raise lab12()
                                    raise lab11()
                                except lab12: pass
                                self.cursor = self.limit - v_9
                                try:
                                    # call Suffix_Verb_Step2c, line 570
                                    if not self.__r_Suffix_Verb_Step2c():
                                        raise lab13()
                                    raise lab11()
                                except lab13: pass
                                self.cursor = self.limit - v_9
                                # next, line 570
                                if self.cursor <= self.limit_backward:
                                    raise lab7()
                                self.cursor -= 1
                            except lab11: pass
                            raise lab6()
                        except lab7: pass
                        self.cursor = self.limit - v_6
                        try:
                            # call Suffix_Verb_Step2b, line 572
                            if not self.__r_Suffix_Verb_Step2b():
                                raise lab14()
                            raise lab6()
                        except lab14: pass
                        self.cursor = self.limit - v_6
                        # call Suffix_Verb_Step2a, line 573
                        if not self.__r_Suffix_Verb_Step2a():
                            raise lab5()
                    except lab6: pass
                    raise lab4()
                except lab5: pass
                self.cursor = self.limit - v_5
                try:
                    # (, line 577
                    # Boolean test is_noun, line 578
                    if not self.B_is_noun:
                        raise lab15()
                    # (, line 579
                    # try, line 581
                    v_10 = self.limit - self.cursor
                    try:
                        # (, line 581
                        # or, line 583
                        try:
                            v_11 = self.limit - self.cursor
                            try:
                                # call Suffix_Noun_Step2c2, line 582
                                if not self.__r_Suffix_Noun_Step2c2():
                                    raise lab18()
                                raise lab17()
                            except lab18: pass
                            self.cursor = self.limit - v_11
                            try:
                                # (, line 583
                                # not, line 583
                                try:
                                    # Boolean test is_defined, line 583
                                    if not self.B_is_defined:
                                        raise lab20()
                                    raise lab19()
                                except lab20: pass
                                # call Suffix_Noun_Step1a, line 583
                                if not self.__r_Suffix_Noun_Step1a():
                                    raise lab19()
                                # (, line 583
                                # or, line 585
                                try:
                                    v_13 = self.limit - self.cursor
                                    try:
                                        # call Suffix_Noun_Step2a, line 584
                                        if not self.__r_Suffix_Noun_Step2a():
                                            raise lab22()
                                        raise lab21()
                                    except lab22: pass
                                    self.cursor = self.limit - v_13
                                    try:
                                        # call Suffix_Noun_Step2b, line 585
                                        if not self.__r_Suffix_Noun_Step2b():
                                            raise lab23()
                                        raise lab21()
                                    except lab23: pass
                                    self.cursor = self.limit - v_13
                                    try:
                                        # call Suffix_Noun_Step2c1, line 586
                                        if not self.__r_Suffix_Noun_Step2c1():
                                            raise lab24()
                                        raise lab21()
                                    except lab24: pass
                                    self.cursor = self.limit - v_13
                                    # next, line 587
                                    if self.cursor <= self.limit_backward:
                                        raise lab19()
                                    self.cursor -= 1
                                except lab21: pass
                                raise lab17()
                            except lab19: pass
                            self.cursor = self.limit - v_11
                            try:
                                # (, line 588
                                # call Suffix_Noun_Step1b, line 588
                                if not self.__r_Suffix_Noun_Step1b():
                                    raise lab25()
                                # (, line 588
                                # or, line 590
                                try:
                                    v_14 = self.limit - self.cursor
                                    try:
                                        # call Suffix_Noun_Step2a, line 589
                                        if not self.__r_Suffix_Noun_Step2a():
                                            raise lab27()
                                        raise lab26()
                                    except lab27: pass
                                    self.cursor = self.limit - v_14
                                    try:
                                        # call Suffix_Noun_Step2b, line 590
                                        if not self.__r_Suffix_Noun_Step2b():
                                            raise lab28()
                                        raise lab26()
                                    except lab28: pass
                                    self.cursor = self.limit - v_14
                                    # call Suffix_Noun_Step2c1, line 591
                                    if not self.__r_Suffix_Noun_Step2c1():
                                        raise lab25()
                                except lab26: pass
                                raise lab17()
                            except lab25: pass
                            self.cursor = self.limit - v_11
                            try:
                                # (, line 592
                                # not, line 592
                                try:
                                    # Boolean test is_defined, line 592
                                    if not self.B_is_defined:
                                        raise lab30()
                                    raise lab29()
                                except lab30: pass
                                # call Suffix_Noun_Step2a, line 592
                                if not self.__r_Suffix_Noun_Step2a():
                                    raise lab29()
                                raise lab17()
                            except lab29: pass
                            self.cursor = self.limit - v_11
                            # (, line 593
                            # call Suffix_Noun_Step2b, line 593
                            if not self.__r_Suffix_Noun_Step2b():
                                self.cursor = self.limit - v_10
                                raise lab16()
                        except lab17: pass
                    except lab16: pass
                    # call Suffix_Noun_Step3, line 595
                    if not self.__r_Suffix_Noun_Step3():
                        raise lab15()
                    raise lab4()
                except lab15: pass
                self.cursor = self.limit - v_5
                # call Suffix_All_alef_maqsura, line 601
                if not self.__r_Suffix_All_alef_maqsura():
                    raise lab3()
            except lab4: pass
        except lab3: pass
        self.cursor = self.limit - v_4
        self.cursor = self.limit_backward
        # do, line 606
        v_16 = self.cursor
        try:
            # (, line 606
            # try, line 607
            v_17 = self.cursor
            try:
                # call Prefix_Step1, line 607
                if not self.__r_Prefix_Step1():
                    self.cursor = v_17
                    raise lab32()
            except lab32: pass
            # try, line 608
            v_18 = self.cursor
            try:
                # (, line 608
                # or, line 608
                try:
                    v_19 = self.cursor
                    try:
                        # call Prefix_Step2a, line 608
                        if not self.__r_Prefix_Step2a():
                            raise lab35()
                        raise lab34()
                    except lab35: pass
                    self.cursor = v_19
                    # call Prefix_Step2b, line 608
                    if not self.__r_Prefix_Step2b():
                        self.cursor = v_18
                        raise lab33()
                except lab34: pass
            except lab33: pass
            # (, line 609
            # or, line 610
            try:
                v_20 = self.cursor
                try:
                    # call Prefix_Step3a_Noun, line 609
                    if not self.__r_Prefix_Step3a_Noun():
                        raise lab37()
                    raise lab36()
                except lab37: pass
                self.cursor = v_20
                try:
                    # (, line 610
                    # Boolean test is_noun, line 610
                    if not self.B_is_noun:
                        raise lab38()
                    # call Prefix_Step3b_Noun, line 610
                    if not self.__r_Prefix_Step3b_Noun():
                        raise lab38()
                    raise lab36()
                except lab38: pass
                self.cursor = v_20
                # (, line 611
                # Boolean test is_verb, line 611
                if not self.B_is_verb:
                    raise lab31()
                # try, line 611
                v_21 = self.cursor
                try:
                    # call Prefix_Step3_Verb, line 611
                    if not self.__r_Prefix_Step3_Verb():
                        self.cursor = v_21
                        raise lab39()
                except lab39: pass
                # call Prefix_Step4_Verb, line 611
                if not self.__r_Prefix_Step4_Verb():
                    raise lab31()
            except lab36: pass
        except lab31: pass
        self.cursor = v_16
        # do, line 616
        v_22 = self.cursor
        try:
            # call Normalize_post, line 616
            if not self.__r_Normalize_post():
                raise lab40()
        except lab40: pass
        self.cursor = v_22
        return True


class lab0(BaseException): pass


class lab1(BaseException): pass


class lab2(BaseException): pass


class lab3(BaseException): pass


class lab4(BaseException): pass


class lab5(BaseException): pass


class lab6(BaseException): pass


class lab7(BaseException): pass


class lab8(BaseException): pass


class lab9(BaseException): pass


class lab10(BaseException): pass


class lab11(BaseException): pass


class lab12(BaseException): pass


class lab13(BaseException): pass


class lab14(BaseException): pass


class lab15(BaseException): pass


class lab16(BaseException): pass


class lab17(BaseException): pass


class lab18(BaseException): pass


class lab19(BaseException): pass


class lab20(BaseException): pass


class lab21(BaseException): pass


class lab22(BaseException): pass


class lab23(BaseException): pass


class lab24(BaseException): pass


class lab25(BaseException): pass


class lab26(BaseException): pass


class lab27(BaseException): pass


class lab28(BaseException): pass


class lab29(BaseException): pass


class lab30(BaseException): pass


class lab31(BaseException): pass


class lab32(BaseException): pass


class lab33(BaseException): pass


class lab34(BaseException): pass


class lab35(BaseException): pass


class lab36(BaseException): pass


class lab37(BaseException): pass


class lab38(BaseException): pass


class lab39(BaseException): pass


class lab40(BaseException): pass
